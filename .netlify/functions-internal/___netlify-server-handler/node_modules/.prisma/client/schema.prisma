// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Business {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  domain    String?
  settings  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users            User[]
  listings         Listing[]
  orders           Order[]
  customers        Customer[]
  reviews          Review[]
  socialAccounts   SocialAccount[]
  socialPosts      SocialPost[]
  eventSyncs       EventSync[]
  webhookEndpoints WebhookEndpoint[]
  auditLogs        AuditLog[]
  apiKeys          ApiKey[]
  coupons          Coupon[]
  loyaltyLedgers   LoyaltyLedger[]
  roleAssignments  RoleAssignment[]
  spaces           Space[]
  spaceRequests    SpaceRequest[]
  payoutAccount    PayoutAccount?
  payouts          Payout[]

  @@map("businesses")
}

model User {
  id          String    @id @default(cuid())
  businessId  String
  email       String    @unique
  firstName   String
  lastName    String
  avatar      String?
  isActive    Boolean   @default(true)
  lastLoginAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  business        Business         @relation(fields: [businessId], references: [id], onDelete: Cascade)
  roleAssignments RoleAssignment[]
  auditLogs       AuditLog[]

  @@map("users")
}

model RoleAssignment {
  id         String   @id @default(cuid())
  userId     String
  businessId String
  role       Role     @default(STAFF)
  createdAt  DateTime @default(now())

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@unique([userId, businessId])
  @@map("role_assignments")
}

model Listing {
  id              String        @id @default(cuid())
  businessId      String
  title           String
  slug            String        @unique
  type            ListingType
  status          ListingStatus @default(DRAFT)
  description     String?
  category        String?
  locationCity    String?
  locationCountry String?
  // images
  photos          Json? // string[] URLs
  // optional common commerce fields
  currency        String? // e.g. "USD"
  priceFrom       Int? // minor units (cents)
  capacity        Int?
  // type-specific payload
  details         Json? // typed by Zod discriminated union
  seoMeta         String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  business       Business        @relation(fields: [businessId], references: [id], onDelete: Cascade)
  inventorySlots InventorySlot[]
  ratePlans      RatePlan[]
  orders         OrderItem[]
  reviews        Review[]
  eventSyncs     EventSync[]

  @@map("listings")
}

model InventorySlot {
  id        String   @id @default(cuid())
  listingId String
  start     DateTime
  end       DateTime
  capacity  Int
  remaining Int
  location  String?
  notes     String?
  blackout  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@map("inventory_slots")
}

model RatePlan {
  id         String   @id @default(cuid())
  listingId  String
  name       String
  price      Decimal
  currency   String   @default("USD")
  refundable Boolean  @default(true)
  depositPct Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@map("rate_plans")
}

model Order {
  id         String      @id @default(cuid())
  businessId String
  customerId String?
  total      Decimal
  currency   String      @default("USD")
  status     OrderStatus @default(PENDING)
  items      Json        @default("[]")
  paymentRef String?
  metadata   Json        @default("{}")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  // Relations
  business       Business        @relation(fields: [businessId], references: [id], onDelete: Cascade)
  customer       Customer?       @relation(fields: [customerId], references: [id])
  payments       Payment[]
  loyaltyLedgers LoyaltyLedger[]
  orderItems     OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  listingId String
  quantity  Int
  price     Decimal
  metadata  Json    @default("{}")

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id])

  @@map("order_items")
}

model Payment {
  id        String          @id @default(cuid())
  orderId   String
  provider  PaymentProvider
  amount    Decimal
  currency  String          @default("USD")
  status    PaymentStatus   @default(AUTHORIZED)
  raw       Json            @default("{}")
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Customer {
  id            String   @id @default(cuid())
  businessId    String
  email         String
  name          String
  phone         String?
  loyaltyPoints Int      @default(0)
  metadata      Json     @default("{}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  business       Business        @relation(fields: [businessId], references: [id], onDelete: Cascade)
  orders         Order[]
  reviews        Review[]
  loyaltyLedgers LoyaltyLedger[]

  @@unique([businessId, email])
  @@map("customers")
}

model Review {
  id         String       @id @default(cuid())
  businessId String
  listingId  String
  customerId String
  rating     Int
  text       String?
  status     ReviewStatus @default(PENDING)
  reply      String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  // Relations
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  listing  Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  customer Customer @relation(fields: [customerId], references: [id])

  @@map("reviews")
}

model SocialAccount {
  id            String         @id @default(cuid())
  businessId    String
  provider      SocialProvider
  accessToken   String
  refreshToken  String?
  expiresAt     DateTime?
  accountId     String // page id / ig-user id / location id / org id / group id
  accountName   String?
  scopes        String[] // granted scopes
  lastSuccessAt DateTime?
  lastErrorAt   DateTime?
  metadata      Json           @default("{}")
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  // Relations
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@unique([businessId, provider, accountId])
  @@map("social_accounts")
}

model ProviderAuthState {
  id           String   @id @default(cuid())
  businessId   String
  provider     String
  state        String // CSRF state
  codeVerifier String?
  createdAt    DateTime @default(now())

  @@map("provider_auth_states")
}

model WebhookDelivery {
  id           String   @id @default(cuid())
  businessId   String
  endpointId   String?
  eventType    String
  status       Int
  durationMs   Int
  requestBody  Json?
  responseBody Json?
  createdAt    DateTime @default(now())

  @@map("webhook_deliveries")
}

model SocialPost {
  id         String       @id @default(cuid())
  businessId String
  title      String
  caption    String
  media      Json         @default("[]")
  targets    String[]
  scheduleAt DateTime?
  status     SocialStatus @default(DRAFT)
  results    Json         @default("{}")
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  // Relations
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("social_posts")
}

model EventSync {
  id          String      @id @default(cuid())
  businessId  String
  listingId   String
  targets     String[]
  externalIds Json        @default("{}")
  status      EventStatus @default(DRAFT)
  lastSyncAt  DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  listing  Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@map("event_syncs")
}

model WebhookEndpoint {
  id         String   @id @default(cuid())
  businessId String
  url        String
  secret     String
  active     Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("webhook_endpoints")
}

model AuditLog {
  id          String   @id @default(cuid())
  businessId  String
  actorUserId String
  action      String
  entity      String
  entityId    String?
  meta        Json     @default("{}")
  ip          String?
  createdAt   DateTime @default(now())

  // Relations
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  actor    User     @relation(fields: [actorUserId], references: [id])

  @@map("audit_logs")
}

model ApiKey {
  id         String    @id @default(cuid())
  businessId String
  name       String
  hash       String
  lastUsedAt DateTime?
  createdAt  DateTime  @default(now())

  // Relations
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

model Coupon {
  id           String       @id @default(cuid())
  businessId   String
  code         String
  discountType DiscountType
  value        Decimal
  currency     String?
  startsAt     DateTime?
  endsAt       DateTime?
  maxUses      Int?
  usedCount    Int          @default(0)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Relations
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@unique([businessId, code])
  @@map("coupons")
}

model LoyaltyLedger {
  id         String   @id @default(cuid())
  businessId String
  customerId String
  delta      Int
  reason     String
  orderId    String?
  createdAt  DateTime @default(now())

  // Relations
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  customer Customer @relation(fields: [customerId], references: [id])
  order    Order?   @relation(fields: [orderId], references: [id])

  @@map("loyalty_ledgers")
}

// Enums
enum Role {
  ADMIN
  MANAGER
  STAFF
  INFLUENCER
}

enum ListingType {
  RESTAURANT
  RETREAT
  EVENT
  ACTIVITY
  PROPERTY
}

enum ListingStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum OrderStatus {
  PENDING
  PAID
  REFUNDED
  CANCELLED
}

enum PaymentProvider {
  STRIPE
  RAZORPAY
  TEST
}

enum PaymentStatus {
  AUTHORIZED
  CAPTURED
  REFUNDED
  FAILED
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

enum SocialProvider {
  FACEBOOK_PAGE
  INSTAGRAM_BUSINESS
  GOOGLE_BUSINESS
  EVENTBRITE
  MEETUP
}

enum SocialStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  FAILED
}

enum EventStatus {
  DRAFT
  PUBLISHED
  UPDATED
  FAILED
}

enum DiscountType {
  PCT
  AMOUNT
}

// Space Rental Models
model Space {
  id           String              @id @default(cuid())
  businessId   String
  title        String
  slug         String              @unique
  description  String
  photos       Json                @default("[]") // string[] urls
  location     Json                @default("{}") // { address, lat, lng }
  capacity     Int
  floorAreaM2  Int?
  status       SpaceStatus         @default(DRAFT)
  amenities    SpaceAmenity[]
  rules        SpaceRule[]
  pricingRules SpacePricingRule[]
  calendars    SpaceAvailability[]
  requests     SpaceRequest[]
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt

  // Relations
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("spaces")
}

enum SpaceStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model SpaceAmenity {
  id       String  @id @default(cuid())
  spaceId  String
  label    String
  category String? // e.g., "Audio", "Seating"

  // Relations
  space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  @@map("space_amenities")
}

model SpaceRule {
  id       String  @id @default(cuid())
  spaceId  String
  label    String // e.g., "No alcohol", "Quiet after 9pm"
  required Boolean // host requires acceptance

  // Relations
  space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  @@map("space_rules")
}

model SpacePricingRule {
  id        String      @id @default(cuid())
  spaceId   String
  kind      PricingKind // HOURLY, DAILY, PEAK, CLEANING_FEE, SECURITY_DEPOSIT
  amount    Int // in minor units (cents)
  currency  String      @default("USD")
  dow       Int[]       @default([]) // days of week for peak/off-peak
  startHour Int? // 0-23
  endHour   Int?

  // Relations
  space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  @@map("space_pricing_rules")
}

enum PricingKind {
  HOURLY
  DAILY
  PEAK
  CLEANING_FEE
  SECURITY_DEPOSIT
}

model SpaceAvailability {
  id        String   @id @default(cuid())
  spaceId   String
  start     DateTime
  end       DateTime
  isBlocked Boolean  @default(false) // blackout
  notes     String?

  // Relations
  space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  @@map("space_availability")
}

model SpaceRequest {
  id               String         @id @default(cuid())
  businessId       String
  spaceId          String
  organizerId      String // Customer.id or Business contact
  title            String
  description      String?
  attendees        Int
  start            DateTime
  end              DateTime
  status           SpaceReqStatus @default(PENDING)
  holdExpiresAt    DateTime?
  quoteAmount      Int // total in minor units
  currency         String         @default("USD")
  depositAmount    Int? // for SECURITY_DEPOSIT
  cleaningFee      Int? // optional fee
  pricingBreakdown Json           @default("{}") // detailed lines for UI
  messages         SpaceMessage[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  // Relations
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  space    Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  @@map("space_requests")
}

enum SpaceReqStatus {
  PENDING
  NEEDS_PAYMENT
  PAID_HOLD
  CONFIRMED
  DECLINED
  EXPIRED
  CANCELLED
}

model SpaceMessage {
  id          String   @id @default(cuid())
  spaceReqId  String
  senderId    String // User id
  body        String
  attachments Json?    @default("[]") // string[] urls
  createdAt   DateTime @default(now())

  // Relations
  spaceRequest SpaceRequest @relation(fields: [spaceReqId], references: [id], onDelete: Cascade)

  @@map("space_messages")
}

model PayoutAccount {
  id         String   @id @default(cuid())
  businessId String   @unique
  provider   String   @default("STRIPE")
  accountId  String // stripe account id
  status     String   @default("REQUIRED") // "REQUIRED", "COMPLETE", etc.
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())

  // Relations
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  payouts  Payout[]

  @@map("payout_accounts")
}

model Payout {
  id         String   @id @default(cuid())
  businessId String
  spaceReqId String?
  amount     Int
  currency   String   @default("USD")
  provider   String   @default("STRIPE")
  externalId String? // transfer id
  status     String   @default("PENDING") // "PENDING", "PAID", "FAILED"
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  business      Business      @relation(fields: [businessId], references: [id], onDelete: Cascade)
  payoutAccount PayoutAccount @relation(fields: [businessId], references: [businessId], map: "payouts_payout_account_fkey")

  @@map("payouts")
}
